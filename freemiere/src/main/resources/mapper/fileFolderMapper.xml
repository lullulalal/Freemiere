<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<!-- 회원정보 처리 SQL -->
<mapper namespace="com.sc32c3.freemiere.dao.FileFolderMapper">
	<!-- <select id="getFilerFolerInfo" parameterType="string" resultType="FileFolder">
		select * from filefolders where LOWER(path) like LOWER('%#{path}%') 
	</select> -->
	
	<select id="getFilerFolerInfo" resultType="FileFolder">
		select myffs.ffs_email email, myffs.ffs_path path,
		       myffs.ffs_info info, myffs.ffs_isshared isshared, 
		       myffs.ffs_ffid ffid, myffs.ffs_isdeleted isdeleted,
		       bm.bookstate bookstate
		from	(select ffs.email ffs_email, ffs.path ffs_path, 
				ffs.info ffs_info, ffs.isshared ffs_isshared, 
				ffs.ffid ffs_ffid, ffs.isdeleted ffs_isdeleted
			from filefolders ffs
			where LOWER(ffs.path)=LOWER(#{0}) ) myffs, bookmarks bm
		where myffs.ffs_ffid = bm.ffid(+) 
		      and (bm.email=#{1} or bm.email is null) 
		      and LOWER(myffs.ffs_isshared)='f'
		      and LOWER(myffs.ffs_isdeleted)='f'
	</select>
	
	
	<select id="getSharedList" parameterType="string" resultType="FileFolder">
		select shared.ffs_email email, shared.ffs_path path,
		       shared.ffs_info info, shared.ffs_isshared isshared, 
		       shared.ffs_ffid ffid, shared.ffs_isdeleted isdeleted,
		       shared.s_auth auth, bm.bookstate bookstate
		from  (select ffs.email ffs_email, ffs.path ffs_path, 
			ffs.info ffs_info, ffs.isshared ffs_isshared, 
			ffs.ffid ffs_ffid, ffs.isdeleted ffs_isdeleted,
			s.auth s_auth 
			from filefolders ffs, shares s
			where 	ffs.ffid=s.ffid
			and s.email=#{email} 
			and LOWER(ffs.isShared)='t' 
			and LOWER(ffs.isDeleted)='f') shared, bookmarks bm
		where shared.ffs_ffid = bm.ffid(+) 
		      and (bm.email=#{email} or bm.email is null)
	</select>
	
	<!--<select id="getMyStorageList" parameterType="string" resultType="FileFolder">
		select myffs.ffs_email email, myffs.ffs_path path,
		       myffs.ffs_info info, myffs.ffs_isshared isshared, 
		       myffs.ffs_ffid ffid, myffs.ffs_isdeleted isdeleted,
		       bm.bookstate bookstate
		from	(select ffs.email ffs_email, ffs.path ffs_path, 
				ffs.info ffs_info, ffs.isshared ffs_isshared, 
				ffs.ffid ffs_ffid, ffs.isdeleted ffs_isdeleted
			from filefolders ffs
			where ffs.email=#{email}
				and LOWER(ffs.isShared)='f' 
				and LOWER(ffs.isDeleted)='f') myffs, bookmarks bm
		where myffs.ffs_ffid = bm.ffid(+) 
		      and (bm.email=#{email} or bm.email is null)
		      
	</select> -->
	
	<select id="getMyRecentList" parameterType="map" resultType="FileFolder">
		select myffs.ffs_email email, myffs.ffs_path path,
		       myffs.ffs_info info, myffs.ffs_isshared isshared, 
		       myffs.ffs_ffid ffid, myffs.ffs_isdeleted isdeleted,
		       bm.bookstate bookstate
		from	(select ffs.email ffs_email, ffs.path ffs_path, 
				ffs.info ffs_info, ffs.isshared ffs_isshared, 
				ffs.ffid ffs_ffid, ffs.isdeleted ffs_isdeleted
			from filefolders ffs
			where LOWER(ffs.path)=LOWER(#{path}) ) myffs, bookmarks bm
		where ffs.ffid=s.ffid
		      and (bm.email=#{email} or bm.email is null) 
		      and LOWER(myffs.ffs_isshared)='f'
		      and LOWER(myffs.ffs_isdeleted)='f'
		
		
	</select>
	
	
	<!-- 검색 -->
	<select id="getSearchList" parameterType="string" resultType="FileFolder">
		select * from filefolders
		where path like '%#{title}%' 
			order by path desc
	</select>
	
	
	
	<select id="getSharedBookmarkList" parameterType="string" resultType="FileFolder">
		select shared.ffs_email email, shared.ffs_path path,
		       shared.ffs_info info, shared.ffs_isshared isshared, 
		       shared.ffs_ffid ffid, shared.ffs_isdeleted isdeleted,
		       shared.s_auth auth, bm.bookstate bookstate
		from  (select ffs.email ffs_email, ffs.path ffs_path, 
			ffs.info ffs_info, ffs.isshared ffs_isshared, 
			ffs.ffid ffs_ffid, ffs.isdeleted ffs_isdeleted,
			s.auth s_auth 
			from filefolders ffs, shares s
			where 	ffs.ffid=s.ffid
			and s.email=#{email} 
			and LOWER(ffs.isShared)='t' 
			and LOWER(ffs.isDeleted)='f') shared, bookmarks bm
		where shared.ffs_ffid = bm.ffid 
		      and bm.email=#{email}
	</select>
	
	<select id="getMyStorageBookmarkList" parameterType="string" resultType="FileFolder">
		select myffs.ffs_email email, myffs.ffs_path path,
		       myffs.ffs_info info, myffs.ffs_isshared isshared, 
		       myffs.ffs_ffid ffid, myffs.ffs_isdeleted isdeleted,
		       bm.bookstate bookstate
		from	(select ffs.email ffs_email, ffs.path ffs_path, 
				ffs.info ffs_info, ffs.isshared ffs_isshared, 
				ffs.ffid ffs_ffid, ffs.isdeleted ffs_isdeleted
			from filefolders ffs
			where ffs.email=#{email}
				and LOWER(ffs.isShared)='f' 
				and LOWER(ffs.isDeleted)='f') myffs, bookmarks bm
		where myffs.ffs_ffid = bm.ffid
		      and (bm.email=#{email} or bm.email is null)
	</select>
	
	<select id="getTrashList" parameterType="string" resultType="FileFolder">
		select * from filefolders
		where email=#{email} 
			and LOWER(isDeleted)='t'
	</select>
	
	<!-- 일반 파일 폴더 삭제 -->
	<update id="deleteFileFolder" parameterType="int">
		update filefolders
		set isdeleted = 't'
		where ffid = #{ffid}
	</update>
	
	<!--북마크 파일폴더 삭제  -->
	<delete id="deleteBookmarks" parameterType="map">
		delete bookmarks 
		where 
			ffid = #{ffid}
		and
			email = #{email}
	</delete>
	
	<!--공유 파일폴더 삭제  -->
	<delete id="deleteShare" parameterType="map">
		delete shares 
		where 
			ffid = #{ffid}
		and
			email = #{email}
	</delete>
	
</mapper>
